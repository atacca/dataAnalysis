#### ##########################################
#### ANALYSIS OF TEST RESULTS #################
#### ##########################################

#library(tidyverse)
library(stringr)
library(dplyr)
library(tidytext)
library(lubridate)
library(scales)
library(openxlsx)
library(wordcloud)
library(RColorBrewer)
library(reshape2)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(ggpubr)
library(RMySQL)


### SQL QUERY TO CREATE THE DATA FRAME ###
#removed#


##### ###################
### TIDY UP FROM IMPORT
##### ###################

# Format dates for sql import
df <- df %>%
  mutate(linenumber = row_number())
df$timestamp <- as.POSIXct(df$timestamp)
df$dtStart <- as.POSIXct(df$dtStart)

#change the sede names that either aren't relevant anymore (keep an eye on this, may be temp)
df$sede <- gsub("^\\*", "", df$sede)
df$sede <- gsub("Roma Spagna", "Roma Prati", df$sede)

# get a test count of unfinished tests (where finalRes == 0) (this needs to happen before they're filtered out)
count_unfinishedTests <- df[!duplicated(df$testCode), ] %>%
  filter(finalRes == 0) 
count_unfinishedTests <- n_distinct(count_unfinishedTests$testCode)
paste0("Number of unfinished tests = ", count_unfinishedTests)

#filter out any unfinished tests (where finalRes == 0)
df <- df %>%
  filter(!finalRes == 0)

### NEW COLUMNS ADDED TO DF RELATING TO TIMES COMPLETED, CODE IS UNDER 'TIMES TAKEN TO COMPLETE' ###


##### ###########
### ANALYSIS
##### ###########

# TEST COUNT  (n_distinct is the same as length(unique(df$col))) (unfinished test count happens earlier)
count_tests <- n_distinct(df$testCode)
paste0("Number of finished tests: ", count_tests)


### COUNT OF TESTS DONE TODAY IS LOWER, UNDER THE 'TIMES TAKEN TO COMPLETE' (NEED TO USE AN OBJECT CREATED LOWER) ###


### CALCULATE THE TIMES TAKEN TO COMPLETE #
#create new dataframe with testCode and timestamp, convert to datetime, then order by code>time
df_timestamp <- df %>%
  select(c("testCode", "timestamp"))

df_timestamp <- df_timestamp[with(df_timestamp, order(testCode, timestamp)), ]    
times_started <- df_timestamp[!duplicated(df_timestamp$testCode,
                                          fromLast = FALSE),  "timestamp"]
times_finished <- df_timestamp[!duplicated(df_timestamp$testCode,
                                           fromLast = TRUE), "timestamp"]
test_times <- data.frame(times_started, times_finished)


# ADD NEW COLUMNS RELATING TO WHEN COMPLETED AND IF FINISHED ON A DIFFERENT DAY (doesn't build upon the test_times
# object, uses a new one, adding the testCode and new time columns w/o HMS. Making it confusing now, will clean up l8)
time_testsDone <- df %>%
  select(c("testCode", "sede", "timestamp"))
#order the df by testcode and then time (we'll take the first question timestamp for simplicity)
time_testsDone <- time_testsDone[with(time_testsDone, order(testCode, timestamp)), ]
#remove duplicates, leaving the 1st entry (i.e. the 1st question time) and strip HMS
time_testsDone <- data.frame(time_testsDone[!duplicated(time_testsDone$testCode), ]) %>%
  rename(firstQ = timestamp)
time_testsDone$firstQ <- as.POSIXct(format(time_testsDone$firstQ, format = "%Y-%m-%d"))
#add a column for the last time and strip HM
time_testsDone$lastQ <- times_finished
time_testsDone$lastQ <- as.POSIXct(format(time_testsDone$lastQ, format = "%Y-%m-%d"))

# check if tests started & finished on the same day, add a new column for them
for (i in 1:nrow(time_testsDone)) {
  if (time_testsDone$firstQ[i] == time_testsDone$lastQ[i]) {
    time_testsDone$finishedSameDay[i] = "YES" }
      else {
        time_testsDone$finishedSameDay[i] = "NO"
      }
  i = i + 1
}


## NOW TO CALCULATE THE TIME TAKEN FOR A TEST. REMOVED ARE TESTS STARTED ON 1 DAY AND COMPLETED ON ANOTHER ##
# I'll cbind time_testsDone w/ test_times, to put all the info together. Sure it didn't need to be 2 objects, TO FIX
test_times <- cbind(time_testsDone, test_times)

# loop through each row, calc time diff, add result to df
test_lengths_list <- list()
i <- 1
for (i in 1:nrow(test_times)) {
  x <- difftime(test_times$times_finished[i], test_times$times_started[i], units = "mins")
  test_lengths_list[[i]] <- x
  i <- i + 1
}
test_lengths <- do.call(rbind, test_lengths_list)

# combine the start & finish times with the time difference between the two
time_taken <- cbind(test_times, test_lengths)
time_taken <- time_taken %>%
  rename(times = "test_lengths")
time_taken$times <- round(time_taken$times, digits = 1)

#now remove the tests that started and finished in more than 60mins 
time_taken_filteredToSixty <- time_taken %>%
  filter(times < 60)
  
#now remove the tests that started and finished in less than 60mins 
time_taken_filteredLong <- time_taken %>%
  filter(times > 60)


# LET's PUT THE NEW COLUMNS BACK INTO THE BASE DF (firstQ, lastQ, finishedSameDay, times) TO KEEP EVERYTHING TOGETHER
df$firstQ <- time_testsDone$firstQ[match(df$testCode, time_testsDone$testCode)]
df$lastQ <- time_testsDone$lastQ[match(df$testCode, time_testsDone$testCode)]
df$finishedSameDay <- time_testsDone$finishedSameDay[match(df$testCode, time_testsDone$testCode)]
df$minutesToComplete <- time_taken$times[match(df$testCode, time_taken$testCode)]


# PLOT THE TIMES TAKEN TO COMPLETE
# get average time to complete, and reformat to time
test_lengths_avg <- as.duration(mean(time_taken_filteredToSixty$times))
# make a label with the average, to place on the plot
text_for_plot_avg <- paste0("Average = ", round(test_lengths_avg, digits = 2))

#plot tests lasting <60 mins
ggplot(data = time_taken_filteredToSixty, aes(x = time_taken_filteredToSixty$times)) +
  geom_bar(fill = "blue", width = 0.5) +
  geom_vline(xintercept = mean(time_taken_filteredToSixty$times), color = "red") +
  labs(title = "Times taken to complete the SEAT (<60 mins)") +
  labs(x = "Length of Test", y = "Count of Tests") +
  annotate("text", x = 35, y = 60, label = text_for_plot_avg) +
  scale_x_continuous(breaks = seq(from = 0,
                                      to = ceiling(max(time_taken_filteredToSixty$times)) + 10, by = 5)) +
  scale_y_continuous(breaks = seq(from = 0, to = 100, by = 25))



# COUNT OF TESTS TODAY BY SEDE (NEED TO USE THE 'times_finished' object, created above) #
#using the time_testsDone dataframe that was created at the start
#now to start the count. first to strip the hours from the timestamp
count_testsDoneToday <- time_testsDone
count_testsDoneToday <- count_testsDoneToday %>%
  filter(firstQ == format(Sys.Date())) %>%
  count(sede) %>%
  rename(Count = n) %>%
  arrange(desc(Count))
count_testsDoneToday


# TESTS TAKEN OVER TIME (BAR PLOT) #
tests_overTime <- df[!duplicated(df$testCode), ] %>%
                  rename(Date = firstQ) %>%
                  arrange(Date) %>%
                  mutate(Test_Number = row_number())    ## filter, change DT format, reorder

plot_TestsOverTime <- ggplot(data = tests_overTime, aes(x = Date, y = Test_Number)) +
                    geom_line(color = "blue") +
                    geom_point(shape = 20, size = 0.5) +
                    scale_x_datetime(breaks = date_breaks("1 months"),
                                     labels = date_format(format = "%b")) +
                    labs(title = paste0("Tests completed over time", " (", count_tests, " tests)")) +
                    labs(x = "Time", y = "Total Tests")
plot_TestsOverTime


#ISOLATE HIGHEST AND LOWEST TIMES TAKEN TO COMPLETE (<10mins, >60mins)
tests_shortAndLong <- df[!duplicated(df$testCode), ] %>%
  filter(minutesToComplete < 11 | minutesToComplete > 60) %>%
  select(c("testCode", "sede", "lastQ", "finishedSameDay", "minutesToComplete")) %>%
  arrange(sede)




# COUNT OF TESTS BY SEDE #
count_bySede <- df %>%
                  group_by(sede) %>%
                  summarise(n_distinct(testCode)) %>%
                  rename(Count = `n_distinct(testCode)`) %>%
                  arrange(Count)    ## new df filtered by test code, counts by sede

plot_countBySede <- ggplot(data = count_bySede, aes(x = reorder(sede, -Count), y = Count)) +
                          geom_bar(stat = "identity", fill = "steelblue") +
                          geom_text(aes(label = Count), vjust = -0.3, size = 3.5) +
                          labs(title = "Number of tests completed by sede") +
                          labs(x = "Sede", y = "Number of Tests") +
                          theme(axis.text.x = element_text(angle = 35, hjust = 1))
plot_countBySede


# FLUENCY CHECK DONE/NOT DONE #
df_Fluency <- data.frame(df) %>%
                select(c("testCode", "flCEFR")) %>%
                transform(flCEFR = as.numeric(flCEFR))    ## new df with relevant cols
                
df_Fluency2 <- df_Fluency[match(unique(df_Fluency$testCode),
                          df_Fluency$testCode), ]    ## reduce to 1 row per test code

count_ifDone <- sum(df_Fluency2$flCEFR > 0)                 
count_ifNotDone <- sum(df_Fluency2$flCEFR==0)

fcNames <- c("FC done", "FC not done")    ## col names for the below df
count_ifFluencyDone <- data.frame(c(count_ifDone, count_ifNotDone)) %>%
                        cbind(fcNames) %>%
                        rename(Count = "c.count_ifDone..count_ifNotDone.",
                          If_Done = "fcNames")    ## new df for the tallies

count_ifFluencyDone <- count_ifFluencyDone[, c(2, 1)]    ## reorder the df

pie_FC <- ggplot(count_ifFluencyDone, aes("", Count, fill = If_Done)) +
          ggtitle("Fluency Check done?") +
          geom_col(position = "fill") +
          theme(axis.text.x = element_blank(), axis.title.x = element_blank(),
            axis.title.y = element_blank(), legend.title = element_blank()) +
          geom_label(aes(label = paste0(round(Count / sum(Count) * 100), "%")),
            position = position_fill(vjust = 0.5)) +
          coord_polar(theta = "y")
pie_FC


# FEEDBACK #
#### These next 6 lines are just to get the feedback column into its own df and formatted for
#### unnesting. It's way too much work as it keeps going back and forth as factors. Need to find
#### a better way to do it.
df_feedback <- data.frame(df$feedback, stringsAsFactors = FALSE)
colnames(df_feedback) <- paste("feedback")
df_feedback <- df_feedback[match(unique(df_feedback$feedback), df_feedback$feedback), ]
df_feedback <- data.frame(df_feedback, stringsAsFactors = FALSE)
colnames(df_feedback) <- paste("feedback")
df_feedback$feedback <- as.character(df_feedback$feedback)

df_feedback <- df_feedback %>%
  unnest_tokens(word, feedback)

default_stopwords <- unnest_tokens(read.csv("default_stopwords.csv",
                      stringsAsFactors = FALSE), word, word) %>%
                      as_tibble()

df_feedback_noStops <- df_feedback %>%
  anti_join(default_stopwords, by = "word")

# Word frequency count
feedback_wordFreq <- count(df_feedback_noStops, word, sort = TRUE)
feedback_wordFreq

# wordcloud
feedback_wordcloud <- df_feedback_noStops %>%
  count(word) %>%
  with(wordcloud(word, n, max.words = 150))

feedback_wordcloud_comparison <- df_feedback_noStops %>%
  inner_join(get_sentiments("bing")) %>%
  count(word, sentiment, sort = TRUE) %>%
  acast(word ~ sentiment, value.var = "n", fill = 0) %>%
  comparison.cloud(colors = c("green", "red"), max.words = 160,
                    title.size = 1.5)



# AVERAGE RESPONSE TIME BY SECTION #
## this sounds so lazy, but...I set it up to filter by a section and get the times, with the intent
## to see if it worked, then rework it so all 4 sections would get looped through with filters...
## but to save time I'm just copying and pasting the code 3 times, then combining all results after..

### MC SECTION ###
# starting with a trial dataset in a separate df, then will build a full one
df_mc <- df %>% filter(section == "MC") %>%
  select(c("testCode", "qNum", "timestamp", "section"))
 
# order the results by code then timestamp
df_mc <- df_mc[with(df_mc, order(testCode, timestamp)), ]

#take the first and last times for each test code, then combine
mc_times_started <- df_mc[!duplicated(df_mc$testCode, fromLast = FALSE), ]
mc_times_finished <- df_mc[!duplicated(df_mc$testCode, fromLast = TRUE), ]

mc_timestamps <- data.frame(mc_times_started, finished = mc_times_finished$timestamp)

# get the time difference between each start and finish times
mc_times_list <- list()

for (i in 1:nrow(mc_timestamps)) {
  x <- mc_timestamps$finished[i] - mc_timestamps$timestamp[i]
  mc_times_list[[i]] <- x
  i <- i + 1
}
mc_times <- data.frame(MC = do.call(rbind, mc_times_list))

### SC SECTION ###
# starting with a trial dataset in a separate df, then will build a full one
df_sc <- df %>% filter(section == "SC") %>%
  select(c("testCode", "qNum", "timestamp", "section"))
 
# order the results by code then timestamp
df_sc <- df_sc[with(df_sc, order(testCode, timestamp)), ]

#take the first and last times for each test code, then combine
sc_times_started <- df_sc[!duplicated(df_sc$testCode, fromLast = FALSE), ]
sc_times_finished <- df_sc[!duplicated(df_sc$testCode, fromLast = TRUE), ]

sc_timestamps <- data.frame(sc_times_started, finished = sc_times_finished$timestamp)

# get the time difference between each start and finish times
sc_times_list <- list()

for (i in 1:nrow(sc_timestamps)) {
  x <- sc_timestamps$finished[i] - sc_timestamps$timestamp[i]
  sc_times_list[[i]] <- x
  i <- i + 1
}
sc_times <- data.frame(SC = do.call(rbind, sc_times_list))

### WO SECTION ###
# starting with a trial dataset in a separate df, then will build a full one
df_wo <- df %>% filter(section == "WO") %>%
  select(c("testCode", "qNum", "timestamp", "section"))
 
# order the results by code then timestamp
df_wo <- df_wo[with(df_wo, order(testCode, timestamp)), ]

#take the first and last times for each test code, then combine
wo_times_started <- df_wo[!duplicated(df_wo$testCode, fromLast = FALSE), ]
wo_times_finished <- df_wo[!duplicated(df_wo$testCode, fromLast = TRUE), ]

wo_timestamps <- data.frame(wo_times_started, finished = wo_times_finished$timestamp)

# get the time difference between each start and finish times
wo_times_list <- list()

for (i in 1:nrow(wo_timestamps)) {
  x <- wo_timestamps$finished[i] - wo_timestamps$timestamp[i]
  wo_times_list[[i]] <- x
  i <- i + 1
}
wo_times <- data.frame(WO = do.call(rbind, wo_times_list))

### LI SECTION ###
# starting with a trial dataset in a separate df, then will build a full one
df_li <- df %>% filter(section == "LI") %>%
  select(c("testCode", "qNum", "timestamp", "section"))
 
# order the results by code then timestamp
df_li <- df_li[with(df_li, order(testCode, timestamp)), ]

#take the first and last times for each test code, then combine
li_times_started <- df_li[!duplicated(df_li$testCode, fromLast = FALSE), ]
li_times_finished <- df_li[!duplicated(df_li$testCode, fromLast = TRUE), ]

li_timestamps <- data.frame(li_times_started, finished = li_times_finished$timestamp)

# get the time difference between each start and finish times, make a df for ggplot
li_times_list <- list()

for (i in 1:nrow(li_timestamps)) {
  x <- li_timestamps$finished[i] - li_timestamps$timestamp[i]
  li_times_list[[i]] <- x
  i <- i + 1
}
li_times <- data.frame(LI = do.call(rbind, li_times_list))

## PLOT THE 4 SECTIONS TOGETHER ##
# multiple choice histogram
mc_hist <- ggplot(data = mc_times, aes(mc_times$MC)) +
  geom_histogram(binwidth = 1,
                  col = "blue",
                  fill = "blue",
                  alpha = 0.5) +
  stat_count(aes(y = ..count.., label = ..count..), geom = "text", size = 2.5, vjust = -1) +
  labs(x = "Multiple Choice", y = "count", size =1) +
  xlim(c(min(mc_times) - 1, max(mc_times) ))

# sentence completion histogram
sc_hist <- ggplot(data = sc_times, aes(sc_times$SC)) +
  geom_histogram(binwidth = 1,
                  col = "red",
                  fill = "red",
                  alpha = 0.5) +
  stat_count(aes(y = ..count.., label = ..count..), geom = "text", size = 2.5, vjust = -1) +
  labs(x = "Sentence Completion", y = "count") +
  xlim(c(min(sc_times) - 1, max(sc_times) ))

# word order histogram
wo_hist <- ggplot(data = wo_times, aes(wo_times$WO)) +
  geom_histogram(binwidth = 1,
                  col = "green",
                  fill = "green",
                  alpha = 0.5) +
  stat_count(aes(y = ..count.., label = ..count..), geom = "text", size = 2.5, vjust = -1) +
  labs(x = "Word Order", y = "count") +
  xlim(c(min(wo_times) - 1, max(wo_times) ))

# listening histogram
li_hist <- ggplot(data = li_times, aes(li_times$LI)) +
  geom_histogram(binwidth = 1,
                  col = "grey",
                  fill = "grey",
                  alpha = 0.5) +
  stat_count(aes(y = ..count.., label = ..count..), geom = "text", size = 2.5, vjust = -1) + 
  labs(x = "Listening", y = "count") +
  xlim(c(min(li_times) - 1, max(li_times) ))

# plot together (using ggpubr)
section_times_plot <- ggarrange(mc_hist, sc_hist, wo_hist, li_hist, ncol = 2, nrow = 2)
annotate_figure(section_times_plot,
                  top = text_grob("Time taken to complete each section",
                    color = "red", face = "bold", size = 12))

## NUMBER OF QUESTIONS ASKED PER TEST SECTION ## (WIP)


